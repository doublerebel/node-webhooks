// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  "use strict";
  var Webhooks, domain, exec, express, extend, fs, iced, path, __iced_k, __iced_k_noop,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  express = require("express");

  domain = require("domain");

  fs = require("fs");

  path = require("path");

  exec = require("child_process").exec;

  extend = function() {
    var key, source, sources, target, val, _i, _len;
    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
      source = sources[_i];
      for (key in source) {
        val = source[key];
        target[key] = val;
      }
    }
    return target;
  };

  Webhooks = (function() {
    Webhooks.prototype.defaults = {
      namespace: "webhooks",
      port: 10010,
      script: "./webhook",
      type: "node",
      basedir: path.join(process.cwd(), "hooks")
    };

    function Webhooks(options) {
      var key;
      if (options == null) {
        options = {};
      }
      this.executeNodeModule = __bind(this.executeNodeModule, this);
      this.executeShellScript = __bind(this.executeShellScript, this);
      this.listenForWebhook = __bind(this.listenForWebhook, this);
      options = extend({}, this.defaults, options);
      for (key in this.defaults) {
        this[key] = options[key];
      }
      this.app || (this.app = express());
    }

    Webhooks.prototype.start = function() {
      this.app.use(express.bodyParser());
      this.app.use(express.errorHandler());
      this.app.use(express.logger());
      this.app.post(path.join("/", this.namespace, ":hook"), this.listenForWebhook);
      return this.app.listen(this.port);
    };

    Webhooks.prototype.listenForWebhook = function(req, res, next) {
      var dir, err, executeHook, exists, fullpath, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (!(dir = req.params.hook)) {
        console.warn("missing hook", req.params.hook);
        return res.send(404);
      }
      fullpath = path.join(this.basedir, dir);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/index.iced",
          funcname: "Webhooks.listenForWebhook"
        });
        fs.exists(fullpath, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return exists = arguments[0];
            };
          })(),
          lineno: 40
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (!exists) {
          console.warn("directory does not exist!", fullpath);
          return res.send(404);
        }
        console.info(dir);
        executeHook = (function() {
          switch (this.type) {
            case "node":
              return this.executeNodeModule;
            default:
              return this.executeShellScript;
          }
        }).call(_this);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/index.iced",
            funcname: "Webhooks.listenForWebhook"
          });
          executeHook(fullpath, req.body, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 51
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (err) {
            return next(err);
          }
          return res.send(200);
        });
      });
    };

    Webhooks.prototype.sane = function(value) {
      return /^[a-zA-Z0-9 _\-+=,.;:'"?!@#%\^&*()<>\[\]{}|\\/\t]+$/.test(value);
    };

    Webhooks.prototype.executeShellScript = function(dir, params, autocb) {
      var cmdWithArgs, err, key, textParams, value, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = autocb;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      textParams = (function() {
        var _results;
        _results = [];
        for (key in params) {
          value = params[key];
          if (this.sane(value)) {
            _results.push("" + key + "=\"" + value + "\"");
          }
        }
        return _results;
      }).call(this);
      cmdWithArgs = this.script + " " + textParams.join(" ");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/index.iced",
          funcname: "Webhooks.executeShellScript"
        });
        exec(cmdWithArgs, {
          cwd: dir
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 61
        }));
        __iced_deferrals._fulfill();
      })(function() {
        autocb(err);
        return;
      });
    };

    Webhooks.prototype.executeNodeModule = function(dir, params, autocb) {
      var err, mod, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = autocb;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      mod = require(path.join(dir, this.script));
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/index.iced",
          funcname: "Webhooks.executeNodeModule"
        });
        mod.hook(params, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 66
        }));
        __iced_deferrals._fulfill();
      })(function() {
        autocb(err);
        return;
      });
    };

    return Webhooks;

  })();

  module.exports = Webhooks;

}).call(this);
