// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  "use strict";
  var ALGORITHM, FORMAT, app, assert, crypto, decrypt, domain, encrypt, exec, executeNodeModule, executeShellScript, express, fs, getId, hashCwd, iced, listenForWebhook, namespace, path, pcwd, port, script, secret, type, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  express = require("express");

  crypto = require("crypto");

  assert = require("assert");

  domain = require("domain");

  fs = require("fs");

  path = require("path");

  exec = require("child_process").exec;

  ALGORITHM = "cast5-cbc";

  FORMAT = "base64";

  namespace = "";

  port = 10010;

  script = "./webhook";

  secret = process.env.WH_SECRET || "keyboard cat";

  type = "shell";

  pcwd = process.cwd();

  app = express();

  executeShellScript = function(dir, params, autocb) {
    var cmdWithArgs, err, key, textParams, value, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = autocb;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    textParams = (function() {
      var _results;
      _results = [];
      for (key in params) {
        value = params[key];
        _results.push("" + key + "=\"" + value + "\"");
      }
      return _results;
    })();
    cmdWithArgs = app.script + " " + textParams.join(" ");
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "src/index.iced",
        funcname: "executeShellScript"
      });
      exec(cmdWithArgs, {
        cwd: dir
      }, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return err = arguments[0];
          };
        })(),
        lineno: 27
      }));
      __iced_deferrals._fulfill();
    })(function() {
      autocb(err);
      return;
    });
  };

  executeNodeModule = function(dir, params, autocb) {
    var err, mod, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = autocb;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    mod = require(path.join(dir, app.script));
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "src/index.iced",
        funcname: "executeNodeModule"
      });
      mod.hook(params, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return err = arguments[0];
          };
        })(),
        lineno: 32
      }));
      __iced_deferrals._fulfill();
    })(function() {
      autocb(err);
      return;
    });
  };

  getId = function() {
    return os.hostname() + pcwd;
  };

  encrypt = function(id, password) {
    var final, projectCipher;
    assert.ok(id);
    assert.ok(password);
    projectCipher = crypto.createCipher(ALGORITHM, password);
    final = projectCipher.update(id, "utf8", FORMAT);
    final += projectCipher.final(FORMAT);
    return final;
  };

  decrypt = function(encrypted, password) {
    var final, projectDecipher;
    assert.ok(encrypted);
    assert.ok(password);
    projectDecipher = crypto.createDecipher(ALGORITHM, password);
    final = projectDecipher.update(encrypted, FORMAT, "utf8");
    final += projectDecipher.final("utf8");
    return final;
  };

  hashCwd = function(cwd) {
    if (cwd == null) {
      cwd = pcwd;
    }
    return encodeURIComponent(encrypt(cwd, app.secret));
  };

  listenForWebhook = function(req, res, next) {
    var dir, err, executeHook, exists, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (!req.params.hash) {
      console.warn("missing hash", req.params.hash);
      return res.send(404);
    }
    try {
      dir = decrypt(req.params.hash, app.secret);
    } catch (_error) {
      err = _error;
      if (err.toString().match(/DecipherFinal/)) {
        console.warn("could not decipher", req.params.hash);
        return res.send(404);
      } else {
        return next(err);
      }
    }
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "src/index.iced",
        funcname: "listenForWebhook"
      });
      fs.exists(dir, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return exists = arguments[0];
          };
        })(),
        lineno: 70
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (!exists) {
        console.warn("directory does not exist!", dir);
        return res.send(404);
      }
      console.info(dir);
      executeHook = (function() {
        switch (app.type) {
          case "node":
            return executeNodeModule;
          default:
            return executeShellScript;
        }
      })();
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/index.iced",
          funcname: "listenForWebhook"
        });
        executeHook(dir, req.body, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 81
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (err) {
          return next(err);
        }
        return res.send(200);
      });
    });
  };

  app.use(express.bodyParser());

  app.use(express.errorHandler());

  app.use(express.logger());

  app.encrypt = encrypt;

  app.decrypt = decrypt;

  app.hashCwd = hashCwd;

  app.namespace = namespace;

  app.script = script;

  app.secret = secret;

  app.port = port;

  app.type = type;

  app.post("" + app.namespace + "/:hash", listenForWebhook);

  module.exports = app;

}).call(this);
