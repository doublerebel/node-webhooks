// Generated by IcedCoffeeScript 1.7.1-e
(function() {
  "use strict";
  var Webhooks, exec, express, extend, fs, http, iced, path, __iced_k, __iced_k_noop,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  express = require("express");

  fs = require("fs");

  http = require("http");

  path = require("path");

  exec = require("child_process").exec;

  extend = function() {
    var key, source, sources, target, val, _i, _len;
    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
      source = sources[_i];
      for (key in source) {
        val = source[key];
        target[key] = val;
      }
    }
    return target;
  };

  Webhooks = (function() {
    Webhooks.prototype.defaults = {
      namespace: "webhooks",
      port: 10010,
      script: "./webhook",
      type: "node",
      basedir: path.join(process.cwd(), "hooks")
    };

    function Webhooks(hooks, options) {
      var key;
      if (options == null) {
        options = {};
      }
      this.executeNodeModule = __bind(this.executeNodeModule, this);
      this.executeShellScript = __bind(this.executeShellScript, this);
      this.listenForWebhook = __bind(this.listenForWebhook, this);
      options = extend({}, this.defaults, options);
      for (key in this.defaults) {
        this[key] = options[key];
      }
      this.app || (this.app = express());
      this.loadHooks(hooks);
    }

    Webhooks.prototype.loadHooks = function(hooksToLoad, autocb) {
      var dir, hook, hookopts, loc, type, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = autocb;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (hooksToLoad == null) {
        hooksToLoad = {};
      }
      if (autocb == null) {
        autocb = function() {};
      }
      if (!(Object.keys(hooksToLoad)).length) {
        throw new Error("hooks must be specified");
      }
      this.hooks = {};
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/charles/source/node-webhooks/src/index.iced",
            funcname: "Webhooks.loadHooks"
          });
          for (hook in hooksToLoad) {
            hookopts = hooksToLoad[hook];
            type = hookopts.type || _this.type;
            dir = hookopts.dir || hook;
            loc = path.join(_this.basedir, dir, _this.script);
            console.log("hook at " + (path.join("/", _this.namespace, dir)));
            if (hookopts.hook || (hookopts = hookopts.mod)) {
              _this.hooks[dir] = hookopts;
            } else {
              _this.loadHook(type, loc, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return hook = arguments[0];
                  };
                })(),
                lineno: 44
              }));
              _this.hooks[dir] = hook;
            }
          }
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          autocb(console.log("hooks loaded"));
          return;
        };
      })(this));
    };

    Webhooks.prototype.loadHook = function(type, loc, autocb) {
      var e, error, exists, mod, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = autocb;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      error = function(loc) {
        throw new Error("unable to load webhook module at " + loc);
      };
      switch (type) {
        case "node":
          try {
            mod = require(loc);
            console.log("loaded node webhook at " + loc);
          } catch (_error) {
            e = _error;
            error(loc);
          } finally {
            autocb(mod);
            return;
          }
          return __iced_k();
        default:
          (function(_this) {
            return (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/charles/source/node-webhooks/src/index.iced",
                funcname: "Webhooks.loadHook"
              });
              fs.exists(loc, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return exists = arguments[0];
                  };
                })(),
                lineno: 61
              }));
              __iced_deferrals._fulfill();
            });
          })(this)((function(_this) {
            return function() {
              if (!exists) {
                autocb(error(loc));
                return;
              }
              console.log("loaded shell webhook at " + loc);
              return __iced_k(loc);
            };
          })(this));
      }
    };

    Webhooks.prototype.lastRoute = function(req, res, next) {
      res.status(404);
      if (req.accepts('json')) {
        return res.send({
          error: 'Not found'
        });
      } else {
        return res.type('txt').send('Not found');
      }
    };

    Webhooks.prototype.errorMiddleware = function(err, req, res, next) {
      res.status(err.status || 500);
      return res.send(http.STATUS_CODES[res.status]);
    };

    Webhooks.prototype.start = function() {
      this.app.use(express.bodyParser());
      this.app.use(express.errorHandler());
      this.app.use(express.logger());
      this.app.use(this.app.router);
      this.app.post(path.join("/", this.namespace, ":hook"), this.listenForWebhook);
      this.app.use(this.lastRoute);
      this.app.use(this.errorMiddleware);
      return this.app.listen(this.port);
    };

    Webhooks.prototype.listenForWebhook = function(req, res, next) {
      var dir, err, executeHook, hook, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (!(dir = req.params.hook && (hook = hooks[dir]))) {
        console.warn("missing hook", req.params.hook);
        return res.send(404);
      }
      executeHook = (function() {
        switch (typeof hook) {
          case "string":
            return this.executeShellScript;
          default:
            return this.executeNodeModule;
        }
      }).call(this);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/charles/source/node-webhooks/src/index.iced",
            funcname: "Webhooks.listenForWebhook"
          });
          executeHook(hook, req.body, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 97
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (err) {
            return next(err);
          }
          return res.send(200);
        };
      })(this));
    };

    Webhooks.prototype.sane = function(value) {
      return /^[a-zA-Z0-9 _\-+=,.;:'"?!@#%\^&*()<>\[\]{}|\\/\t]+$/.test(value);
    };

    Webhooks.prototype.executeShellScript = function(path, params, autocb) {
      var cmdWithArgs, err, key, textParams, value, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = autocb;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      textParams = (function() {
        var _results;
        _results = [];
        for (key in params) {
          value = params[key];
          if (this.sane(value)) {
            _results.push("" + key + "=\"" + value + "\"");
          }
        }
        return _results;
      }).call(this);
      cmdWithArgs = path + " " + textParams.join(" ");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/charles/source/node-webhooks/src/index.iced",
            funcname: "Webhooks.executeShellScript"
          });
          exec(cmdWithArgs, {
            cwd: path.dirname(path)
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 107
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          autocb(err);
          return;
        };
      })(this));
    };

    Webhooks.prototype.executeNodeModule = function(mod, params, autocb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = autocb;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/charles/source/node-webhooks/src/index.iced",
            funcname: "Webhooks.executeNodeModule"
          });
          mod.hook(params, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 111
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          autocb(err);
          return;
        };
      })(this));
    };

    return Webhooks;

  })();

  module.exports = Webhooks;

}).call(this);
